import discord
from discord import app_commands
from discord.ext import commands, tasks
import a2s
import os
from dotenv import load_dotenv
import asyncio
import socket
from datetime import datetime
import pytz
from server_state import ServerState

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env
TOKEN = os.getenv('DISCORD_TOKEN')
STATUS_CHANNEL_ID = int(os.getenv('STATUS_CHANNEL_ID'))
ADMIN_ROLE_ID = int(os.getenv('ADMIN_ROLE_ID'))
UPDATE_INTERVAL = int(os.getenv('UPDATE_INTERVAL', '10'))
MAX_PLAYERS_SHOW = int(os.getenv('MAX_PLAYERS_SHOW', '30'))
BOT_STATUS = os.getenv('BOT_STATUS', '–≥—É–±–µ—à–∫–æ–π')
INFO_TIMEOUT = float(os.getenv('INFO_TIMEOUT', '3.0'))
PLAYERS_TIMEOUT = float(os.getenv('PLAYERS_TIMEOUT', '7.0'))

if TOKEN is None:
    raise ValueError("–¢–æ–∫–µ–Ω Discord –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")

# ANSI —Ü–≤–µ—Ç–∞
COLORS = {
    'red': '\u001b[31m',
    'green': '\u001b[32m',
    'yellow': '\u001b[33m',
    'blue': '\u001b[34m',
    'magenta': '\u001b[35m',
    'cyan': '\u001b[36m',
    'white': '\u001b[37m',
    'reset': '\u001b[0m'
}

class GModServer:
    def __init__(self):
        self.address = None
        self.port = None
        self.status_message = None
        self.last_player_count = 0
        self.last_change_time = None
        self.server_name = None
        self.message_id = None
        self.channel_id = None

    def set_server(self, address, port):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–º–µ–Ω–∏"""
        old_name = self.server_name
        self.address = address
        self.port = port
        self.status_message = None
        self.last_player_count = 0
        self.last_change_time = None
        self.server_name = old_name

    def is_configured(self):
        return self.address is not None and self.port is not None

    def update_player_count(self, new_count):
        if new_count != self.last_player_count:
            self.last_player_count = new_count
            self.last_change_time = datetime.now()
            return True
        return False

    def update_server_name(self, name):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if name:
            self.server_name = name

    def format_player_info(self, player):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        minutes = int(player.duration//60)
        return f"‚ïë {COLORS['yellow']}{minutes:3d} –º–∏–Ω.{COLORS['reset']} | {COLORS['cyan']}{player.name}{COLORS['reset']}\n"

    def format_long_text(self, text, max_length=75):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —Å—Ç—Ä–æ–∫–∏"""
        if len(text) <= max_length:
            return text
        
        parts = []
        current_part = ""
        words = text.split('/')
        
        for word in words:
            if len(current_part) + len(word) + 1 <= max_length:
                current_part += ('/' if current_part else '') + word
            else:
                if current_part:
                    parts.append(current_part)
                current_part = word
        
        if current_part:
            parts.append(current_part)
            
        return '\n‚ïë         '.join(parts)

    def get_server_url(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞ tsarvar.com"""
        return f"https://tsarvar.com/ru/servers/garrys-mod/{self.address}:{self.port}"

    def calculate_message_length(self, header, players_info, footer, remaining_info=""):
        """–ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return len(header) + len(players_info) + len(footer) + len(remaining_info)

    def format_time_since_change(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if not self.last_change_time:
            return "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –Ω–∏–∫–æ–≥–¥–∞"
        
        now = datetime.now()
        diff = now - self.last_change_time
        
        if diff.total_seconds() < 60:
            return f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {int(diff.total_seconds())} —Å–µ–∫. –Ω–∞–∑–∞–¥"
        elif diff.total_seconds() < 3600:
            return f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {int(diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            hours = int(diff.total_seconds() // 3600)
            return f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {hours} —á. –Ω–∞–∑–∞–¥"

class GModBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        super().__init__(command_prefix='/', intents=intents)
        self.servers = {}
        self.server_state = ServerState()
        self.add_commands()
        
    def get_server_id(self, address, port):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞"""
        return f"{address}:{port}"

    def add_server(self, address, port):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        server_id = self.get_server_id(address, port)
        if server_id in self.servers:
            return False, "–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        
        server = GModServer()
        server.set_server(address, port)
        self.servers[server_id] = server
        return True, "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"

    def remove_server(self, address, port):
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        server_id = self.get_server_id(address, port)
        if server_id not in self.servers:
            return False, "–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        
        server = self.servers[server_id]
        if server.status_message:
            asyncio.create_task(server.status_message.delete())
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.server_state.remove_server(server_id)
        del self.servers[server_id]
        return True, "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"

    def add_commands(self):
        @self.tree.command(name="connect", description="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        async def connect_command(interaction: discord.Interaction, server_address: str):
            if not self.has_admin_role(interaction.user):
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
                return
                
            try:
                address, port = server_address.split(':')
                port = int(port)
                success, message = self.add_server(address, port)
                await interaction.response.send_message(
                    f"{'‚úÖ' if success else '‚ùå'} {message}",
                    ephemeral=True
                )
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ip:port",
                    ephemeral=True
                )

        @self.tree.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞")
        async def stop_command(interaction: discord.Interaction, server_address: str):
            if not self.has_admin_role(interaction.user):
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
                return
                
            try:
                address, port = server_address.split(':')
                port = int(port)
                success, message = self.remove_server(address, port)
                await interaction.response.send_message(
                    f"{'‚úÖ' if success else '‚ùå'} {message}",
                    ephemeral=True
                )
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ip:port",
                    ephemeral=True
                )

        @self.tree.command(name="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        async def list_command(interaction: discord.Interaction):
            if not self.has_admin_role(interaction.user):
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
                return
                
            if not self.servers:
                await interaction.response.send_message("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", ephemeral=True)
                return
                
            server_list = "\n".join([
                f"üìç {server_id}" + 
                (f" - {server.server_name}" if server.server_name else "")
                for server_id, server in self.servers.items()
            ])
            await interaction.response.send_message(
                f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n{server_list}",
                ephemeral=True
            )

    @tasks.loop(seconds=UPDATE_INTERVAL)
    async def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        servers_copy = dict(self.servers)
        for server_id, server in servers_copy.items():
            try:
                print(f"\n[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id}")
                await self.check_server_status(server)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞] –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")

    async def setup_hook(self):
        print("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...")
        self.update_status.start()
        print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...")
        try:
            synced = await self.tree.sync()
            print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    def has_admin_role(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user.guild:
            return False
        return any(role.id == ADMIN_ROLE_ID for role in user.roles)

    async def check_server_status(self, server):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        channel = self.get_channel(STATUS_CHANNEL_ID)
        if not channel:
            print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {STATUS_CHANNEL_ID}")
            return

        server_id = self.get_server_id(server.address, server.port)
        stored_server_info = self.server_state.get_server_info(server_id)

        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message = "```ansi\n"
            header = message + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            header += "‚ïë          \u001b[1;33m–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ\u001b[0m              ‚ïë\n"
            header += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
            players_info = ""
            footer = "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n```"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            max_retries = 2
            retry_delay = 1  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            server_info = None
            server_players = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            for attempt in range(max_retries):
                try:
                    print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                    socket.setdefaulttimeout(INFO_TIMEOUT)
                    address = (server.address, server.port)
                    server_info = a2s.info(address)
                    
                    socket.setdefaulttimeout(PLAYERS_TIMEOUT)
                    server_players = a2s.players(address)
                    
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    break
                    
                except (socket.timeout, ConnectionRefusedError, OSError) as e:
                    print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(retry_delay)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
            if server_info is None:
                print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                server_url = server.get_server_url()
                # –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω–Ω—É—é —Ä–∞–º–∫—É
                message = "```ansi\n"
                header = message + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
                header += "‚ïë                              \u001b[1;33m–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ\u001b[0m                                 ‚ïë\n"
                header += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                header += f"‚ïë \u001b[1;36m–ù–∞–∑–≤–∞–Ω–∏–µ:\u001b[0m \u001b[1;34m{server_url}\u001b[0m\n"
                header += f"‚ïë \u001b[1;36mIP:\u001b[0m {server.address}:{server.port}\n"
                header += f"‚ïë \u001b[1;36m–°—Ç–∞—Ç—É—Å:\u001b[0m \u001b[1;31m–û—Ñ—Ñ–ª–∞–π–Ω\u001b[0m\n"
                header += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                header += "‚ïë                                \u001b[1;33m–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\u001b[0m                                     ‚ïë\n"
                header += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                header += "‚ïë \u001b[1;31m–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\u001b[0m\n"
                header += f"‚ïë \u001b[1;31m–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M:%S')}\u001b[0m\n"
                footer = "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n```"
                message = header + footer
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if stored_server_info and stored_server_info.get("message_id"):
                        try:
                            print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                            msg = await channel.fetch_message(int(stored_server_info["message_id"]))
                            await msg.edit(content=message)
                            print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        except (discord.NotFound, discord.HTTPException, discord.Forbidden):
                            print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
                            new_message = await channel.send(message)
                            self.server_state.update_message_id(server_id, new_message.id)
                            print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
                    else:
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        new_message = await channel.send(message)
                        self.server_state.add_server(server_id, new_message.id, channel.id, server.server_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
                except Exception as e:
                    print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–µ: {str(e)}")
                return
            
            # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                player_count_changed = server.update_player_count(server_info.player_count)
                change_message = ""
                if player_count_changed:
                    change_type = "‚ûï" if server_info.player_count > server.last_player_count else "‚ûñ"
                    change_message = f"‚ïë \u001b[1;35m{change_type} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\u001b[0m\n"
                
                header += f"‚ïë \u001b[1;36m–ù–∞–∑–≤–∞–Ω–∏–µ:\u001b[0m {server_info.server_name}\n"
                header += f"‚ïë \u001b[1;36m–ö–∞—Ä—Ç–∞:\u001b[0m {server_info.map_name}\n"
                header += f"‚ïë \u001b[1;32mIP:\u001b[0m {server.address}:{server.port}\n"
                header += f"‚ïë \u001b[1;32m–ò–≥—Ä–æ–∫–∏:\u001b[0m {server_info.player_count}/{server_info.max_players}\n"
                header += f"‚ïë {server.format_time_since_change()}\n"
                header += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                
                server.update_server_name(server_info.server_name)
                
                if server_players:
                    players_info += "‚ïë            \u001b[1;33m–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\u001b[0m                  ‚ïë\n"
                    players_info += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                    valid_players = [p for p in server_players if p.name]
                    if valid_players:
                        sorted_players = sorted(valid_players, key=lambda x: x.duration, reverse=True)
                        
                        temp_players_info = ""
                        displayed_count = 0
                        remaining_players = len(sorted_players)
                        
                        for player in sorted_players:
                            player_line = server.format_player_info(player)
                            message_length = server.calculate_message_length(header, players_info + temp_players_info + player_line + change_message, footer)
                            
                            if message_length >= 1900 or displayed_count >= MAX_PLAYERS_SHOW:
                                remaining_players = len(sorted_players) - displayed_count
                                break
                            
                            temp_players_info += player_line
                            displayed_count += 1
                        
                        players_info += temp_players_info
                        
                        if remaining_players > displayed_count:
                            players_info += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                            players_info += f"‚ïë \u001b[1;35m–ò –µ—â—ë {remaining_players - displayed_count} –∏–≥—Ä–æ–∫–æ–≤\u001b[0m\n"
                        
                        if change_message:
                            players_info += "‚ïë\n"
                            players_info += change_message
                    else:
                        players_info += "‚ïë \u001b[1;31m–°–µ—Ä–≤–µ—Ä –ø—É—Å—Ç\u001b[0m\n"
                else:
                    players_info += "‚ïë \u001b[1;31m–°–µ—Ä–≤–µ—Ä –ø—É—Å—Ç\u001b[0m\n"
                    
            except Exception as e:
                print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
                return
            
            message = header + players_info + footer
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if stored_server_info and stored_server_info.get("message_id"):
                    try:
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        msg = await channel.fetch_message(int(stored_server_info["message_id"]))
                        await msg.edit(content=message)
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    except (discord.NotFound, discord.HTTPException, discord.Forbidden):
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
                        new_message = await channel.send(message)
                        self.server_state.update_message_id(server_id, new_message.id)
                        print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
                else:
                    print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    new_message = await channel.send(message)
                    self.server_state.add_server(server_id, new_message.id, channel.id, server_info.server_name)
                    print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            except Exception as e:
                print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                
        except Exception as e:
            print(f"[–°–µ—Ä–≤–µ—Ä {server_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

    async def on_ready(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        print(f'–ë–æ—Ç {self.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
        activity = discord.Activity(type=discord.ActivityType.playing, name=BOT_STATUS)
        await self.change_presence(activity=activity)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        for server_id, server_info in self.server_state.get_all_servers().items():
            try:
                address, port = server_id.split(':')
                port = int(port)
                success, _ = self.add_server(address, port)
                if success:
                    print(f"[–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ] –°–µ—Ä–≤–µ—Ä {server_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"[–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")

bot = GModBot()
bot.run(TOKEN)
